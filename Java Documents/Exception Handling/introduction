Exception - unwanted & unexpected event that disturbes normal flow of program

Purpose of Exception Handling - if something goes wrong, Program will terminated if we will not handle exception. if something goes wrong , if we want gracefull termination then we have to use exception handling.

Exception Handling - defines alternative way to continue normal flow of program if something goes wrong.

------------------------------------------------------------------------

*  Run time Stack Mechanism 
-> Every java Program is contains main thread.For Every thread Jvm is create one run time stack.for evry method call done by thread, one entry is done in stack which is called stack frame or activation record. after complete method execution entry will removed.after all method call completed,Empty stack is destroyed By Jvm.

EX :- 
   
	class Test
         {
		Public static void main(String srgs[]){
			dostuff();
		}
		public static void dostuff(){
			domorestuff();	
		}
		public static void domorestuff(){
			System.out.println("Hello");
		}
	}

O/P : Hello

	|		|
	|		|
	|		|
	|		|
	|		|
	|		|
	|		|	
	|---------------|
	|domorestuff()	|-> Activation record or Stack frame
	|---------------|
	|dostuff()	|
	|---------------|
	|main()		|
	-----------------
	Runtime Stack of  main Thread.

-> There is only one thread in this program.main method is called by main thread.
-> after domorestuff() execution completed , entery is removed, then do stuff is removed and after then main method entry is also removed.
-> This Meachanism is called runtime stack Mechanism.


------------------------------------------------------------------------------------

* Default Exception Handling

-> if we will not written any Exception Handling code and any Exception is occurs then what will happen. what is default exception handling in java.

EX :- 
   
	class Test
         {
		Public static void main(String srgs[]){
			dostuff();
		}
		public static void dostuff(){
			domorestuff();	
		}
		public static void domorestuff(){
			System.out.println(10/0);
		}
	}

	|		|
	|		|
	|		|
	|		|
	|		|
	|		|
	|		|	
	|---------------|
	|domorestuff()	|-> Activation record or Stack frame
	|---------------|
	|dostuff()	|
	|---------------|
	|main()		|
	-----------------
	Runtime Stack of  main Thread.

-> Arithmatic exception is occurs due to devide by 0.
-> inside a method if exception is rise , then method is responsible to create exception Object with the help of jvm.It includes name, Description, Stacktrace, Location Where Exception is occurs in Exception Object is Created(Internally).method pass this exception is called to jvm.
-> Jvm Check if there is any exception handling code, if there is not any code then jvm terminate that method abnormally and remove that method entry from runtime stack.then check calling method that if that method having any handling code. if that method also not having handling code then that method is also terminated. Jvm repeat this until it find handling code or terminate main method abnormally.
-> now jvm will handle that Exception. Jvm having Default Exception handler. Jvm pass Exception object to default Exception Handler. Default handler just print Exception Stacktrace.


------------------------------------------------------------------------------
 


